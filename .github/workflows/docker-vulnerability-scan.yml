name: Docker Vulnerability Scan (Clair v4 + Syft + Trivy + Grype)

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.dockerfile'
      - '**/Dockerfile'
      - '**/*.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image:
        description: "Docker image to scan (e.g. python:3.12-slim, nginx:latest)"
        required: false
        default: "nginx:latest"
      severity_threshold:
        description: "Fail threshold for Trivy/Grype (comma-separated, e.g. HIGH,CRITICAL)"
        required: false
        default: "HIGH,CRITICAL"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize inputs -> env
        shell: bash
        run: |
          IMAGE="${{ inputs.image }}"
          : "${IMAGE:=nginx:latest}"
          echo "IMAGE=${IMAGE}" >> "$GITHUB_ENV"
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "TRIG_SEVERITIES=${{ inputs.severity_threshold || 'MEDIUM,HIGH,CRITICAL' }}" >> "$GITHUB_ENV"
          else
            echo "TRIG_SEVERITIES=${{ inputs.severity_threshold || 'HIGH,CRITICAL' }}" >> "$GITHUB_ENV"
          fi

      - name: Set up Docker (Buildx)
        uses: docker/setup-buildx-action@v3

      # ---------- Cache DB Trivy/Grype ----------
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}
          restore-keys: |
            trivy-db-

      - name: Cache Grype DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/grype/db
          key: grype-db-${{ runner.os }}
          restore-keys: |
            grype-db-

      # ---------- SBOM (Syft / Anchore) ----------
      - name: Generate SBOM (Syft / SPDX JSON)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE }}
          format: spdx-json
          artifact-name: sbom.spdx.json
          output-file: sbom.spdx.json

      # ---------- Clair v4 DB restore / build ----------
      - name: Restore Clair matcher.db from cache (latest)
        id: restore-matcher
        uses: actions/cache/restore@v4
        with:
          path: matcher.db
          key: matcher-db-${{ runner.os }}-warm
          restore-keys: |
            matcher-db-${{ runner.os }}-

      - name: Clair v4 - generate vulnerability DB (cold path)
        if: steps.restore-matcher.outputs.cache-hit != 'true'
        uses: quay/clair-action@main
        with:
          mode: update
          db-file: matcher.db

      - name: Save matcher.db to cache (when freshly built)
        if: steps.restore-matcher.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: matcher.db
          key: matcher-db-${{ runner.os }}-warm

      # ---------- Clair v4 report (SARIF) ----------
      - name: Clair v4 - scan image (SARIF)
        uses: quay/clair-action@main
        with:
          image-ref: ${{ env.IMAGE }}
          db-file: matcher.db
          format: sarif
          output: clair-results.sarif
          # return-code: "1"

      - name: Upload Clair SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: clair-results.sarif

      - name: Upload Clair SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clair-v4-report
          path: clair-results.sarif
          if-no-files-found: warn

      # ---------- Trivy ----------
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy scan (table)
        run: trivy image "${IMAGE}" --severity "$TRIG_SEVERITIES" --format table --timeout 10m > trivy-report.txt || true

      - name: Trivy JSON
        run: trivy image "${IMAGE}" --severity "$TRIG_SEVERITIES" --format json --timeout 10m > trivy.json || true

      - name: Trivy SARIF
        run: trivy image "${IMAGE}" --severity "$TRIG_SEVERITIES" --format sarif --output trivy.sarif --timeout 10m || true

      - name: Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      # ---------- Grype ----------
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
          sudo mv ./bin/grype /usr/local/bin/
          grype version

      - name: Grype scan (table)
        run: grype "${IMAGE}" --scope all-layers --only-fixed --output table --file grype-report.txt || true

      - name: Grype JSON
        run: grype "${IMAGE}" -o json > grype.json || true

      - name: Grype SARIF
        run: grype "${IMAGE}" -o sarif --file grype.sarif || true

      - name: Upload Grype SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype.sarif

      # ---------- PR summary ----------
      - name: Build PR summary
        if: github.event_name == 'pull_request'
        id: summary
        run: |
          {
            echo "### Security scan summary"
            echo ""
            echo "**Image:** \`${IMAGE}\`"
            echo ""
            echo "<details><summary>Trivy (top lines)</summary>"
            head -n 100 trivy-report.txt || true
            echo "</details>"
            echo ""
            echo "<details><summary>Grype (top lines)</summary>"
            head -n 100 grype-report.txt || true
            echo "</details>"
          } > summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: summary.md

      # ==========================
      # Snyk (opcjonalnie)
      # ==========================
      # - name: Set up Snyk
      #   uses: snyk/actions/setup@master
      # - name: Scan with Snyk
      #   run: snyk container test $IMAGE --severity-threshold=high --json > snyk-report.json
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   continue-on-error: true

      # === Uruchom API (dashboard) w tym samym runnerze ===
      - name: Build API image
        run: |
          docker build -t vuln-api:ci .

      - name: Run API container
        env:
          APP_TOKEN: ${{ secrets.APP_TOKEN }}
        run: |
          mkdir -p data
          docker run -d --name vuln-api \
            -p 8000:8000 \
            -e APP_TOKEN="$APP_TOKEN" \
            -e DB_PATH=/data/vuln.sqlite \
            -v "$PWD/data:/data" \
            vuln-api:ci

      - name: Wait for API to be ready
        run: |
          for i in $(seq 1 60); do
            if curl -fsS http://localhost:8000/ >/dev/null; then
              echo "API is up"; exit 0
            fi
            echo "Waiting for API... ($i/60)"
            sleep 2
          done
          echo "API did not start in time"; docker logs vuln-api || true
          exit 1

      - name: Export API URL/TOKEN for ingestion
        env:
          APP_TOKEN: ${{ secrets.APP_TOKEN }}
        run: |
          echo "API_URL=http://localhost:8000" >> $GITHUB_ENV
          echo "API_TOKEN=$APP_TOKEN" >> $GITHUB_ENV

      # ---------- Push wyniki do API ----------
      - name: Push Trivy -> API
        if: always()
        run: |
          if [ -f trivy.json ]; then
            echo "Sending Trivy results to API..."
            curl -sS -X POST "$API_URL/ingest/trivy?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
              -H "Authorization: Bearer $API_TOKEN" \
              -H "Content-Type: application/json" \
              --data-binary @trivy.json || true
          fi

      - name: Push Grype -> API
        if: always()
        run: |
          if [ -f grype.json ]; then
            echo "Sending Grype results to API..."
            curl -sS -X POST "$API_URL/ingest/grype?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
              -H "Authorization: Bearer $API_TOKEN" \
              -H "Content-Type: application/json" \
              --data-binary @grype.json || true
          fi

      - name: Push Clair SARIF -> API (optional)
        if: always()
        run: |
          if [ -f clair-results.sarif ]; then
            echo "Sending Clair results to API..."
            # Dodaj po stronie backendu endpoint /ingest/clair-sarif jeśli chcesz parsować SARIF
            curl -sS -X POST "$API_URL/ingest/clair-sarif?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
              -H "Authorization: Bearer $API_TOKEN" \
              -F "sarif=@clair-results.sarif" || true
          fi

      # ---------- Upload artefaktów ----------
      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            sbom.spdx.json
            trivy-report.txt
            grype-report.txt
            trivy.json
            grype.json
            clair-results.sarif
          if-no-files-found: warn
