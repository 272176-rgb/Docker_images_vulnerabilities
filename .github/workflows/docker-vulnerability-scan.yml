name: Docker Vulnerability Scan (Clair v4 + Syft + Trivy + Grype)

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.dockerfile'
      - '**/Dockerfile'
      - '**/*.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image:
        description: "Docker image to scan (e.g. python:3.12-slim, nginx:latest)"
        required: false
        default: "node:5"
      severity_threshold:
        description: "Fail threshold for Trivy/Grype (comma-separated, e.g. HIGH,CRITICAL)"
        required: false
        default: "HIGH,CRITICAL"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      security-events: write
      actions: read

    env:
      ALL_SEVERITIES: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize inputs -> env
        shell: bash
        run: |
          IMAGE="${{ inputs.image }}"
          : "${IMAGE:=nginx:latest}"
          echo "IMAGE=${IMAGE}" >> "$GITHUB_ENV"

          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "TRIG_SEVERITIES=${{ inputs.severity_threshold || 'MEDIUM,HIGH,CRITICAL' }}" >> "$GITHUB_ENV"
          else
            echo "TRIG_SEVERITIES=${{ inputs.severity_threshold || 'HIGH,CRITICAL' }}" >> "$GITHUB_ENV"
          fi

      # --- [NEW] Pull & resolve immutable digest for the image ---
      - name: Pull image & resolve digest
        shell: bash
        run: |
          docker pull "${IMAGE}"
          DIGEST="$(docker inspect --format='{{index .RepoDigests 0}}' ${IMAGE})"
          echo "IMAGE_DIGEST=${DIGEST}" >> "$GITHUB_ENV"
          echo "Resolved digest: ${DIGEST}"

      - name: Set up Docker (Buildx)
        uses: docker/setup-buildx-action@v3

      # ---------- Cache DB Trivy/Grype ----------
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}
          restore-keys: |
            trivy-db-

      - name: Cache Grype DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/grype/db
          key: grype-db-${{ runner.os }}
          restore-keys: |
            grype-db-

      # ---------- SBOM (Syft / Anchore) ----------
      - name: Generate SBOM (Syft / SPDX JSON)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE }}
          format: spdx-json
          artifact-name: sbom.spdx.json
          output-file: sbom.spdx.json

      # --- [NEW] Write Clair config with broad updater coverage ---
      - name: Write Clair v4 config
        shell: bash
        run: |
          cat > clair-config.yaml <<'CFG'
          # Clair v4 Configuration (broad coverage)
          indexer:
            analyzer: {}
          matcher:
            # If supported by your build, helps with backports/vendor versions
            mode: aggressive
          updaters:
            sets:
              - alpine
              - debian
              - ubuntu
              - redhat
              - suse
              - oracle
              - ghsa
              - pyupio
              - nvd
            update_interval: 12h
          log:
            level: info
            format: text
          CFG

      # ---------- Clair v4 DB restore / build ----------
      - name: Restore Clair matcher.db from cache (latest)
        id: restore-matcher
        uses: actions/cache/restore@v4
        with:
          path: matcher.db
          # [CHANGED] key depends on config file hash to avoid stale DB
          key: matcher-db-v2-${{ runner.os }}-${{ hashFiles('clair-config.yaml') }}
          restore-keys: |
            matcher-db-v2-${{ runner.os }}-

      - name: Clair v4 - generate vulnerability DB (cold path)
        if: steps.restore-matcher.outputs.cache-hit != 'true'
        uses: quay/clair-action@main
        with:
          mode: update
          db-file: matcher.db
          # [NEW] use the same config used for scanning
          config-file: clair-config.yaml

      - name: Save matcher.db to cache (when freshly built)
        if: steps.restore-matcher.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: matcher.db
          key: matcher-db-v2-${{ runner.os }}-${{ hashFiles('clair-config.yaml') }}

#      # ---------- Clair v4 report (SARIF) ----------
#      - name: Clair v4 - scan image (SARIF)
#        uses: quay/clair-action@main
#        with:
#          image-ref: ${{ env.IMAGE }}
#          db-file: matcher.db
#          format: sarif
#          output: clair-results.sarif
#
#      - name: Upload Clair SARIF to Code Scanning
#        if: ${{ always() && hashFiles('clair-results.sarif') != '' }}
#        uses: github/codeql-action/upload-sarif@v3
#        with:
#          sarif_file: clair-results.sarif
#
#      - name: Upload Clair SARIF artifact
#        if: always()
#        uses: actions/upload-artifact@v4
#        with:
#          name: clair-v4-report
#          path: clair-results.sarif
#          if-no-files-found: warn

      # ---------- [NEW ACTIVE] Clair v4 report (SARIF, digest + config) ----------
      - name: Clair v4 - scan image (SARIF, digest)
        uses: quay/clair-action@main
        with:
          image-ref: ${{ env.IMAGE_DIGEST }}   # scan by immutable digest
          db-file: matcher.db
          config-file: clair-config.yaml
          format: sarif
          output: clair-results.sarif

      - name: Upload Clair SARIF to Code Scanning
        if: ${{ always() && hashFiles('clair-results.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: clair-results.sarif

      - name: Upload Clair SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clair-v4-report
          path: clair-results.sarif
          if-no-files-found: warn

      # ---------- Trivy ----------
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy scan (table)
        run: |
          trivy image "${IMAGE}" \
            --pkg-types os,library \
            --severity "$ALL_SEVERITIES" \
            --ignore-unfixed=false \
            --format table \
            --timeout 10m > trivy-report.txt || true

      - name: Trivy JSON
        run: |
          trivy image "${IMAGE}" \
            --pkg-types os,library \
            --severity "$ALL_SEVERITIES" \
            --ignore-unfixed=false \
            --format json \
            --timeout 10m > trivy.json || true

      - name: Trivy SARIF
        run: |
          trivy image "${IMAGE}" \
            --pkg-types os,library \
            --severity "$ALL_SEVERITIES" \
            --ignore-unfixed=false \
            --format sarif \
            --output trivy.sarif \
            --timeout 10m || true

      - name: Upload Trivy SARIF
        if: ${{ always() && hashFiles('trivy.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      # ---------- Grype ----------
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
          sudo mv ./bin/grype /usr/local/bin/
          grype version

      - name: Grype scan (table)
        run: grype "${IMAGE}" --scope all-layers --only-fixed --output table --file grype-report.txt || true

      - name: Grype JSON
        run: grype "${IMAGE}" --scope all-layers -o json > grype.json || true

      - name: Grype SARIF
        run: grype "${IMAGE}" -o sarif --file grype.sarif || true

      - name: Upload Grype SARIF
        if: ${{ always() && hashFiles('grype.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype.sarif

      # ---------- Snyk ----------
      - name: Set up Snyk
        uses: snyk/actions/setup@v1

      - name: Pull image for Snyk
        run: docker pull "$IMAGE"

      - name: Scan with Snyk
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          SNYK_ORG:   ${{ secrets.SNYK_ORG }}
        run: snyk container test "$IMAGE" --org="$SNYK_ORG" --json --no-proxy > snyk-report.json
        continue-on-error: true  # Allow workflow to continue even if this step fails

      - name: Upload Snyk report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-report
          path: snyk-report.json
          if-no-files-found: warn

      # ---------- PR summary ----------
      - name: Build PR summary
        if: github.event_name == 'pull_request'
        id: summary
        run: |
          {
            echo "### Security scan summary"
            echo ""
            echo "**Image:** \`${IMAGE}\`"
            echo ""
            echo "<details><summary>Trivy (top lines)</summary>"
            head -n 100 trivy-report.txt || true
            echo "</details>"
            echo ""
            echo "<details><summary>Grype (top lines)</summary>"
            head -n 100 grype-report.txt || true
            echo "</details>"
          } > summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: summary.md

#      # === [B] PUSH DO ZEWNÄ˜TRZNEGO API ===
#      - name: Export & validate external API settings
#        env:
#          APP_TOKEN: ${{ secrets.APP_TOKEN }}
#          API_URL_SECRET: ${{ secrets.API_URL }}
#        run: |
#          set -e
#          if [ -z "${API_URL_SECRET}" ]; then
#            echo "ERROR: secrets.API_URL is empty or not set"; exit 1
#          fi
#          if [ -z "${APP_TOKEN}" ]; then
#            echo "ERROR: secrets.APP_TOKEN is empty or not set"; exit 1
#          fi
#          case "${API_URL_SECRET}" in
#            http://*|https://*) ;;
#            *) echo "ERROR: API_URL must start with http:// or https:// (got: ${API_URL_SECRET})"; exit 1 ;;
#          esac
#          echo "API_URL=${API_URL_SECRET}" >> $GITHUB_ENV
#          echo "API_TOKEN=${APP_TOKEN}" >> $GITHUB_ENV
#
#          # Prosty ping (strona gÅ‚Ã³wna)
#          for i in $(seq 1 30); do
#            if curl -fsS "${API_URL_SECRET}/" >/dev/null; then
#              echo "External API is up"; exit 0
#            fi
#            echo "Waiting for external API... ($i/30)"
#            sleep 2
#          done
#          echo "External API not reachable"; exit 1
#
#      # ---------- Push wynikÃ³w do zewnÄ™trznego API ----------
#      - name: Push Trivy -> API
#        if: always()
#        run: |
#          if [ -f trivy.json ]; then
#            echo "Sending Trivy results to API..."
#            curl -sS --fail-with-body -X POST "${API_URL}/ingest/trivy?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
#              -H "Authorization: Bearer ${API_TOKEN}" \
#              -H "Content-Type: application/json" \
#              --data-binary @trivy.json || true
#          else
#            echo "trivy.json not found, skipping"
#          fi
#
#      - name: Push Grype -> API
#        if: always()
#        run: |
#          if [ -f grype.json ]; then
#            echo "Sending Grype results to API..."
#            curl -sS --fail-with-body -X POST "${API_URL}/ingest/grype?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
#              -H "Authorization: Bearer ${API_TOKEN}" \
#              -H "Content-Type: application/json" \
#              --data-binary @grype.json || true
#          else
#            echo "grype.json not found, skipping"
#          fi
#
#      - name: Push Clair SARIF -> API
#        if: always()
#        run: |
#          if [ -f clair-results.sarif ]; then
#            echo "Sending Clair results to API..."
#            curl -sS --fail-with-body -X POST "${API_URL}/ingest/clair-sarif?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
#              -H "Authorization: Bearer ${API_TOKEN}" \
#              -F "sarif=@clair-results.sarif" || true
#          else
#            echo "clair-results.sarif not found, skipping"
#          fi

      # ---------- Upload artefaktÃ³w ----------
      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            sbom.spdx.json
            trivy-report.txt
            grype-report.txt
            trivy.json
            grype.json
            snyk-report.json
            clair-results.sarif
          if-no-files-found: warn

      # Snyk
      # ==========================
#      - name: Set up Snyk
#        uses: snyk/actions/setup@master
#      - name: Scan with Snyk
#        run: snyk container test $IMAGE_TO_SCAN --severity-threshold=high --json --debug --no-proxy > snyk-report.json
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        continue-on-error: true  # Allow the workflow to continue even if this step fails
