name: Docker Vulnerability Scan (Clair v4 + Syft + Trivy + Grype)

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.dockerfile'
      - '**/Dockerfile'
      - '**/*.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image:
        description: "Single Docker image to scan (e.g. python:3.12-slim, nginx:latest)"
        required: false
        default: "nginx:latest"
      severity_threshold:
        description: "Fail threshold for Trivy/Grype (comma-separated e.g. HIGH,CRITICAL)"
        required: false
        default: "HIGH,CRITICAL"

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    # SARIF upload wymaga tego permission
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize inputs -> env
        shell: bash
        run: |
          IMAGE="${{ inputs.image }}"
          : "${IMAGE:=nginx:latest}"
          echo "IMAGE=${IMAGE}" >> "$GITHUB_ENV"
          echo "TRIG_SEVERITIES=${{ inputs.severity_threshold || 'HIGH,CRITICAL' }}" >> "$GITHUB_ENV"

      - name: Set up Docker (Buildx)
        uses: docker/setup-buildx-action@v3

      # -------------------- SBOM (Syft) --------------------
      - name: Generate SBOM (Syft / SPDX JSON)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE }}
          format: spdx-json
          artifact-name: sbom.spdx.json
          output-file: sbom.spdx.json

      # -------------------- Clair v4: przygotuj DB --------------------
      # wg README trzeba NAJPIERW zbudować bazę matcher.db (mode: update),
      # a potem użyć jej w kroku raportu (mode: report).
      - name: Clair v4 - generate vulnerability DB
        uses: quay/clair-action@main
        with:
          mode: update
          db-file: matcher.db

      # (opcjonalnie można cache’ować DB między biegami, jeśli chcesz)
      # - name: Cache matcher.db
      #   uses: actions/cache@v4
      #   with:
      #     path: matcher.db
      #     key: matcher-db

      # -------------------- Clair v4: skan i SARIF --------------------
      - name: Clair v4 - scan image (SARIF)
        uses: quay/clair-action@main
        with:
          image-ref: ${{ env.IMAGE }}
          db-file: matcher.db           # <-- kluczowe: użyj DB wygenerowanej wyżej
          format: sarif
          output: clair-results.sarif
          # return-code: "1"            # odkomentuj, by failować job przy wykrytych CVE wg reguł akcji

      - name: Upload Clair SARIF to Code Scanning
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: clair-results.sarif

      - name: Upload Clair report artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clair-v4-report
          path: clair-results.sarif
          if-no-files-found: warn

      # -------------------- Trivy --------------------
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy scan (table)
        run: trivy image "${IMAGE}" --severity $TRIG_SEVERITIES --format table --timeout 10m > trivy-report.txt || true

      # -------------------- Grype --------------------
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
          sudo mv ./bin/grype /usr/local/bin/
          grype version

      - name: Grype scan (table)
        run: |
          echo "Running Grype on image: ${IMAGE}"
          grype "${IMAGE}" --scope all-layers --only-fixed --output table --file grype-report.txt || true

      # -------------------- Upload pozostałych raportów --------------------
      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            sbom.spdx.json
            trivy-report.txt
            grype-report.txt
            clair-results.sarif
          if-no-files-found: warn
