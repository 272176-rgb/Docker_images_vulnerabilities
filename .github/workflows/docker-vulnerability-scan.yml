name: Docker Vulnerability Scan (Trivy + Grype -> API)

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.dockerfile'
      - '**/Dockerfile'
      - '**/*.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image:
        description: "Docker image to scan (e.g. python:3.12-slim, nginx:latest)"
        required: false
        default: "nginx:latest"
      severity_threshold:
        description: "Fail threshold for Trivy/Grype (comma-separated)"
        required: false
        default: "HIGH,CRITICAL"

jobs:
  scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      IMAGE: ${{ inputs.image || 'nginx:latest' }}
      TRIG_SEVERITIES: ${{ inputs.severity_threshold || 'HIGH,CRITICAL' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker (Buildx)
        uses: docker/setup-buildx-action@v3

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}
          restore-keys: trivy-db-

      - name: Cache Grype DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/grype/db
          key: grype-db-${{ runner.os }}
          restore-keys: grype-db-

      # ---------- TRIVY ----------
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy JSON
        run: trivy image "${IMAGE}" --severity "$TRIG_SEVERITIES" --format json --timeout 10m > trivy.json || true

      # ---------- GRYPE ----------
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
          sudo mv ./bin/grype /usr/local/bin/
          grype version

      - name: Grype JSON
        run: grype "${IMAGE}" -o json > grype.json || true

      # ---------- SEND TO API ----------
      - name: Push Trivy -> API (JSON)
        env:
          API: ${{ secrets.RECV_API_URL }}
          TOKEN: ${{ secrets.RECV_API_TOKEN }}
        run: |
          if [ -s trivy.json ]; then
            echo "Sending Trivy JSON to $API ..."
            curl -sS -X POST "$API/ingest/trivy?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              --data-binary @trivy.json || true
          else
            echo "trivy.json is empty or missing; skipping"
          fi

      - name: Push Grype -> API (JSON)
        env:
          API: ${{ secrets.RECV_API_URL }}
          TOKEN: ${{ secrets.RECV_API_TOKEN }}
        run: |
          if [ -s grype.json ]; then
            echo "Sending Grype JSON to $API ..."
            curl -sS -X POST "$API/ingest/grype?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              --data-binary @grype.json || true
          else
            echo "grype.json is empty or missing; skipping"
          fi

      # artefakty do podglÄ…du
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: scan-json
          path: |
            trivy.json
            grype.json
          if-no-files-found: warn
