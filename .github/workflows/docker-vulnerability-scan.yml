name: Docker Vulnerability Scan (Clair v4 + Syft + Trivy + Grype + Alpine Yearly Compare)

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.dockerfile'
      - '**/Dockerfile'
      - '**/*.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      image:
        description: "Docker image to scan (e.g. python:3.12-slim, nginx:latest)"
        required: false
        default: "nginx:latest"
      severity_threshold:
        description: "Fail threshold for Trivy/Grype (comma-separated, e.g. HIGH,CRITICAL)"
        required: false
        default: "HIGH,CRITICAL"
      alpine_years:
        description: "Comma-separated years to compare Alpine releases (e.g. 2021,2022,2023,2024,2025)"
        required: false
        default: "2021,2022,2023,2024,2025"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # -------------------------------
  # JOB 1: Standardowe skanowanie
  # -------------------------------
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      security-events: write
      actions: read

    # <— mapujemy sekrety do env, a warunki będziemy robić po env.*
    env:
      ALL_SEVERITIES: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      API_URL: ${{ secrets.API_URL }}
      API_TOKEN: ${{ secrets.APP_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Normalize inputs -> env
        shell: bash
        run: |
          IMAGE="${{ inputs.image }}"
          : "${IMAGE:=nginx:latest}"
          echo "IMAGE=${IMAGE}" >> "$GITHUB_ENV"

          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "TRIG_SEVERITIES=${{ inputs.severity_threshold || 'MEDIUM,HIGH,CRITICAL' }}" >> "$GITHUB_ENV"
          else
            echo "TRIG_SEVERITIES=${{ inputs.severity_threshold || 'HIGH,CRITICAL' }}" >> "$GITHUB_ENV"
          fi

      - name: Set up Docker (Buildx)
        uses: docker/setup-buildx-action@v3

      # ---------- Cache DB Trivy/Grype ----------
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}
          restore-keys: |
            trivy-db-

      - name: Cache Grype DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/grype/db
          key: grype-db-${{ runner.os }}
          restore-keys: |
            grype-db-

      # ---------- SBOM (Syft / Anchore) ----------
      - name: Generate SBOM (Syft / SPDX JSON)
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.IMAGE }}
          format: spdx-json
          artifact-name: sbom.spdx.json
          output-file: sbom.spdx.json

      # ---------- Clair v4 DB restore / build ----------
      - name: Restore Clair matcher.db from cache (latest)
        id: restore-matcher
        uses: actions/cache/restore@v4
        with:
          path: matcher.db
          key: matcher-db-${{ runner.os }}-warm
          restore-keys: |
            matcher-db-${{ runner.os }}-

      - name: Clair v4 - generate vulnerability DB (cold path)
        if: steps.restore-matcher.outputs.cache-hit != 'true'
        uses: quay/clair-action@main
        with:
          mode: update
          db-file: matcher.db

      - name: Save matcher.db to cache (when freshly built)
        if: steps.restore-matcher.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: matcher.db
          key: matcher-db-${{ runner.os }}-warm

      # ---------- Clair v4 report (SARIF) ----------
      - name: Clair v4 - scan image (SARIF)
        uses: quay/clair-action@main
        with:
          image-ref: ${{ env.IMAGE }}
          db-file: matcher.db
          format: sarif
          output: clair-results.sarif

      - name: Upload Clair SARIF to Code Scanning
        if: ${{ always() && hashFiles('clair-results.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: clair-results.sarif

      - name: Upload Clair SARIF artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: clair-v4-report
          path: clair-results.sarif
          if-no-files-found: warn

      # ---------- Trivy ----------
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release jq
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy scan (table)
        run: |
          trivy image "${IMAGE}" \
            --pkg-types os,library \
            --severity "$ALL_SEVERITIES" \
            --ignore-unfixed=false \
            --format table \
            --timeout 10m > trivy-report.txt || true

      - name: Trivy JSON
        run: |
          trivy image "${IMAGE}" \
            --pkg-types os,library \
            --severity "$ALL_SEVERITIES" \
            --ignore-unfixed=false \
            --format json \
            --timeout 10m > trivy.json || true

      - name: Trivy SARIF
        run: |
          trivy image "${IMAGE}" \
            --pkg-types os,library \
            --severity "$ALL_SEVERITIES" \
            --ignore-unfixed=false \
            --format sarif \
            --output trivy.sarif \
            --timeout 10m || true

      - name: Upload Trivy SARIF
        if: ${{ always() && hashFiles('trivy.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy.sarif

      # ---------- Grype ----------
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
          sudo mv ./bin/grype /usr/local/bin/
          grype version

      - name: Grype scan (table)
        run: grype "${IMAGE}" --scope all-layers --only-fixed --output table --file grype-report.txt || true

      - name: Grype JSON
        run: grype "${IMAGE}" -o json > grype.json || true

      - name: Grype SARIF
        run: grype "${IMAGE}" -o sarif --file grype.sarif || true

      - name: Upload Grype SARIF
        if: ${{ always() && hashFiles('grype.sarif') != '' }}
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: grype.sarif

      # ---------- PR summary ----------
      - name: Build PR summary
        if: github.event_name == 'pull_request'
        id: summary
        run: |
          {
            echo "### Security scan summary"
            echo ""
            echo "**Image:** \`${IMAGE}\`"
            echo ""
            echo "<details><summary>Trivy (top lines)</summary>"
            head -n 100 trivy-report.txt || true
            echo "</details>"
            echo ""
            echo "<details><summary>Grype (top lines)</summary>"
            head -n 100 grype-report.txt || true
            echo "</details>"
          } > summary.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: summary.md

      # === [B] PUSH DO ZEWNĘTRZNEGO API (opcjonalnie) ===
      - name: Validate external API settings
        if: ${{ env.API_URL != '' && env.API_TOKEN != '' }}
        run: |
          set -e
          case "${API_URL}" in
            http://*|https://*) ;;
            *) echo "ERROR: API_URL must start with http:// or https:// (got: ${API_URL})"; exit 1 ;;
          esac
          for i in $(seq 1 30); do
            if curl -fsS "${API_URL}/" >/dev/null; then
              echo "External API is up"; exit 0
            fi
            echo "Waiting for external API... ($i/30)"
            sleep 2
          done
          echo "External API not reachable"; exit 1

      - name: Push Trivy -> API
        if: ${{ always() && env.API_URL != '' && env.API_TOKEN != '' }}
        run: |
          if [ -f trivy.json ]; then
            echo "Sending Trivy results to API..."
            curl -sS --fail-with-body -X POST "${API_URL}/ingest/trivy?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
              -H "Authorization: Bearer ${API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data-binary @trivy.json || true
          fi

      - name: Push Grype -> API
        if: ${{ always() && env.API_URL != '' && env.API_TOKEN != '' }}
        run: |
          if [ -f grype.json ]; then
            echo "Sending Grype results to API..."
            curl -sS --fail-with-body -X POST "${API_URL}/ingest/grype?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
              -H "Authorization: Bearer ${API_TOKEN}" \
              -H "Content-Type: application/json" \
              --data-binary @grype.json || true
          fi

      - name: Push Clair SARIF -> API
        if: ${{ always() && env.API_URL != '' && env.API_TOKEN != '' }}
        run: |
          if [ -f clair-results.sarif ]; then
            echo "Sending Clair results to API..."
            curl -sS --fail-with-body -X POST "${API_URL}/ingest/clair-sarif?image=${IMAGE}&repo=${{ github.repository }}&commit=${{ github.sha }}&branch=${{ github.ref_name }}&ci_run_id=${{ github.run_id }}" \
              -H "Authorization: Bearer ${API_TOKEN}" \
              -F "sarif=@clair-results.sarif" || true
          fi

      # ---------- Upload artefaktów ----------
      - name: Upload scan artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            sbom.spdx.json
            trivy-report.txt
            grype-report.txt
            trivy.json
            grype.json
            clair-results.sarif
          if-no-files-found: warn

  # ---------------------------------------------
  # JOB 2: Porównanie Alpine (ostatni release / rok)
  # ---------------------------------------------
  compare_alpine_yearly:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      pull-requests: write

    env:
      YEARS: ${{ inputs.alpine_years || '2021,2022,2023,2024,2025' }}
      ALL_SEVERITIES: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
      API_URL: ${{ secrets.API_URL }}
      API_TOKEN: ${{ secrets.APP_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tools (jq, curl, Trivy)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Resolve latest Alpine tag per year & scan
        shell: bash
        run: |
          set -euo pipefail
          IFS=',' read -r -a YEARS_ARR <<< "${YEARS}"
          : > alpine_yearly.csv
          echo "year,tag,total,critical,high,medium,low,unknown" >> alpine_yearly.csv

          resolve_tag_for_year () {
            local YEAR="$1"
            local PAGE=1
            local FOUND=""
            while [ "$PAGE" -le 10 ]; do
              DATA="$(curl -fsSL "https://registry.hub.docker.com/v2/repositories/library/alpine/tags?page_size=100&page=${PAGE}")"
              TAGS=$(echo "$DATA" | jq -r --arg Y "$YEAR" '
                .results[]
                | select(.name | test("^[0-9]+\\.[0-9]+(\\.[0-9]+)?$"))
                | select((.last_updated | fromdateiso8601 | strftime("%Y")) == $Y)
                | .name
              ')
              if [ -n "$TAGS" ]; then
                FOUND=$(echo "$TAGS" \
                  | awk -F. '{ printf "%d %d %d %s\n", $1,$2,($3==""?0:$3),$0 }' \
                  | sort -k1,1n -k2,2n -k3,3n \
                  | awk '{print $4}' \
                  | tail -n1)
              fi
              if [ -n "$FOUND" ]; then break; fi
              NEXT=$(echo "$DATA" | jq -r '.next // empty')
              if [ -z "$NEXT" ]; then break; fi
              PAGE=$((PAGE+1))
            done
            echo "$FOUND"
          }

          for Y in "${YEARS_ARR[@]}"; do
            Y=$(echo "$Y" | xargs)
            [ -z "$Y" ] && continue

            TAG="$(resolve_tag_for_year "$Y")"
            if [ -z "$TAG" ]; then
              echo "No Alpine release found for year ${Y}" >&2
              continue
            fi

            IMG="alpine:${TAG}"
            echo "::group::Scanning ${IMG} (year ${Y})"

            trivy image "${IMG}" \
              --pkg-types os,library \
              --severity "$ALL_SEVERITIES" \
              --ignore-unfixed=false \
              --format json \
              --timeout 10m > "trivy-${Y}.json" || true

            if [ -s "trivy-${Y}.json" ]; then
              read -r TOTAL CRIT HIGH MED LOW UNK < <(
                jq -r '
                  [ .Results[]?.Vulnerabilities[]? | .Severity ] as $s |
                  ($s | length) as $total |
                  ($s | map(select(.=="CRITICAL")) | length) as $crit |
                  ($s | map(select(.=="HIGH")) | length) as $high |
                  ($s | map(select(.=="MEDIUM")) | length) as $med |
                  ($s | map(select(.=="LOW")) | length) as $low |
                  ($s | map(select(.=="UNKNOWN")) | length) as $unk |
                  "\($total) \($crit) \($high) \($med) \($low) \($unk)"
                ' "trivy-${Y}.json"
              )
              echo "${Y},${TAG},${TOTAL},${CRIT},${HIGH},${MED},${LOW},${UNK}" >> alpine_yearly.csv
            else
              echo "${Y},${TAG},0,0,0,0,0,0" >> alpine_yearly.csv
            fi
            echo "::endgroup::"
          done

          {
            echo "### Alpine yearly comparison (by Trivy)"
            echo
            echo "| Year | Tag | Total | Critical | High | Medium | Low | Unknown |"
            echo "|-----:|:----|------:|--------:|-----:|-------:|----:|--------:|"
            tail -n +2 alpine_yearly.csv | while IFS=, read -r y tag total c h m l u; do
              printf "| %s | \`%s\` | %s | %s | %s | %s | %s | %s |\n" "$y" "$tag" "$total" "$c" "$h" "$m" "$l" "$u"
            done
          } > alpine_yearly.md

      - name: Upload Alpine yearly comparison
        uses: actions/upload-artifact@v4
        with:
          name: alpine-yearly-comparison
          path: |
            alpine_yearly.csv
            alpine_yearly.md
            trivy-*.json
          if-no-files-found: warn

      - name: Comment on PR (Alpine yearly)
        if: github.event_name == 'pull_request'
        uses: thollander/actions-comment-pull-request@v2
        with:
          filePath: alpine_yearly.md

      - name: Push each Alpine result to external API (optional)
        if: ${{ env.API_URL != '' && env.API_TOKEN != '' }}
        env:
          # dziedziczymy API_URL/API_TOKEN z job.env
          GIT_REPO: ${{ github.repository }}
          GIT_SHA: ${{ github.sha }}
          GIT_BRANCH: ${{ github.ref_name }}
          GIT_RUN_ID: ${{ github.run_id }}
        shell: bash
        run: |
          if [ -f alpine_yearly.csv ]; then
            tail -n +2 alpine_yearly.csv | while IFS=, read -r y tag total c h m l u; do
              IMG="alpine:${tag}"
              JSON="trivy-${y}.json"
              if [ -s "${JSON}" ]; then
                echo "Sending Trivy results for ${IMG} (year ${y}) to API..."
                curl -sS --fail-with-body -X POST "${API_URL}/ingest/trivy?image=${IMG}&repo=${GIT_REPO}&commit=${GIT_SHA}&branch=${GIT_BRANCH}&ci_run_id=${GIT_RUN_ID}" \
                  -H "Authorization: Bearer ${API_TOKEN}" \
                  -H "Content-Type: application/json" \
                  --data-binary @"${JSON}" || true
              fi
            done
          fi





      # Snyk
      # ==========================
#      - name: Set up Snyk
#        uses: snyk/actions/setup@master
#      - name: Scan with Snyk
#        run: snyk container test $IMAGE_TO_SCAN --severity-threshold=high --json --debug --no-proxy > snyk-report.json
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        continue-on-error: true  # Allow the workflow to continue even if this step fails
