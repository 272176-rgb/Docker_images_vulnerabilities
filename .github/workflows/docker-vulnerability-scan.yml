name: Docker Vulnerability Scan

on:
  push:
    branches:
      - main
    paths:
      - '**/*.dockerfile'
      - '**/Dockerfile'
      - '**/*.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      image:
        description: "Docker image to scan (e.g. python:3.9-slim, nginx:latest, alpine:3.18)"
        required: true
        default: "nginx:latest"

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # -------------------------
      # Set image to scan
      # -------------------------
      - name: Set image to scan
        run: |
          if [ -n "${{ github.event.inputs.image }}" ]; then
            echo "IMAGE_TO_SCAN=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TO_SCAN=nginx:latest" >> $GITHUB_ENV
          fi

      # -------------------------
      # Set up Docker
      # -------------------------
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # -------------------------
      # Pull Docker image
      # -------------------------
      - name: Pull Docker image
        run: docker pull $IMAGE_TO_SCAN

      # ==========================
      # Install necessary build tools
      # ==========================
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-dev build-essential cython3 git

      # ==========================
      # Install Cython, setuptools, and wheel via pip
      # ==========================
      - name: Install Cython, setuptools, and wheel
        run: |
          pip3 install --upgrade cython setuptools wheel
      # ==========================
      # Install Docker Compose
      # ==========================
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify Docker Compose installation
      # ==========================
      # Trivy
      # ==========================
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
      - name: Scan with Trivy
        run: trivy image $IMAGE_TO_SCAN --severity HIGH,CRITICAL --format table > trivy-report.txt
        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # ==========================
      # Grype
      # ==========================
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
          sudo mv ./bin/grype /usr/local/bin/
          grype version
      - name: Scan with Grype
        run: grype $IMAGE_TO_SCAN --only-fixed --output table > grype-report.txt
        continue-on-error: true  # Allow the workflow to continue even if this step fails
      # ==========================
      # Set up Clair (PostgreSQL + Clair using Docker Compose)
      # ==========================
      - name: Run Clair with PostgreSQL
        run: |
          # Clone Clair repository
          git clone https://github.com/quay/clair.git
          cd clair
          
          # Set up PostgreSQL and Clair using Docker Compose
          docker-compose up -d

          # Wait for Clair and PostgreSQL to initialize
          sleep 30  # Adjust the sleep time based on your needs
          until curl -s http://localhost:6060/v1/nodes; do echo "Waiting for Clair to be ready..."; sleep 5; done
          echo "Clair is ready!"

        continue-on-error: true  # Allow the workflow to continue even if Clair setup fails

      # ==========================
      # Install Klar (Clair's client)
      # ==========================
      - name: Install Klar
        run: |
          # Download the Klar binary (for Linux AMD64 architecture) and rename it
          curl -L -o klar-2.4-linux-amd64 https://github.com/optiopay/klar/releases/download/v2.4/klar-2.4-linux-amd64
          
          # Verify the file type to ensure it's a valid binary
          file klar-2.4-linux-amd64
          
          # If the file is a binary, make it executable
          chmod +x klar-2.4-linux-amd64
          
          # Move Klar to a location in the system's PATH
          sudo mv klar-2.4-linux-amd64 /usr/local/bin/klar
          
          # Verify that Klar was installed correctly by checking the version
          klar --version
        continue-on-error: true  # Allow the workflow to continue even if this step fails



      # -------------------------
      # Set environment variables for Klar
      # -------------------------
      - name: Set environment variables for Klar
        run: |
          echo "CLAIR_ADDR=http://localhost:6060" >> $GITHUB_ENV
          echo "DOCKER_USER=docker" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=secret" >> $GITHUB_ENV  # Replace with actual credentials if needed
          echo "CLAIR_OUTPUT=High" >> $GITHUB_ENV
          echo "CLAIR_THRESHOLD=0" >> $GITHUB_ENV
          echo "DOCKER_INSECURE=true" >> $GITHUB_ENV  # Allow insecure Docker registries if needed

      # -------------------------
      # Scan with Clair using Klar
      # -------------------------
      - name: Scan with Clair
        run: |
          klar $IMAGE_TO_SCAN > clair-report.txt
        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # ==========================
      # Snyk
      # ==========================
#      - name: Set up Snyk
#        uses: snyk/actions/setup@master
#      - name: Scan with Snyk
#        run: snyk container test $IMAGE_TO_SCAN --severity-threshold=high --json --debug --no-proxy > snyk-report.json
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # ==========================
      # Upload reports
      # ==========================
      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            trivy-report.txt
            grype-report.txt
            dagda-report.json
            snyk-report.json
            sbom.json
