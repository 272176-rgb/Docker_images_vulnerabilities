name: Docker Vulnerability Scan with Clair

on:
  push:
    branches:
      - main
    paths:
      - '**/*.dockerfile'
      - '**/Dockerfile'
      - '**/*.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      image:
        description: "Docker image to scan (e.g. python:3.9-slim, nginx:latest, alpine:3.18)"
        required: true
        default: "nginx:latest"

jobs:
  scan:
    runs-on: ubuntu-latest

    steps:
      # -------------------------
      # Set image to scan
      # -------------------------
      - name: Set image to scan
        run: |
          if [ -n "${{ github.event.inputs.image }}" ]; then
            echo "IMAGE_TO_SCAN=${{ github.event.inputs.image }}" >> $GITHUB_ENV
          else
            echo "IMAGE_TO_SCAN=nginx:latest" >> $GITHUB_ENV
          fi

      # -------------------------
      # Set up Docker
      # -------------------------
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      # -------------------------
      # Pull Docker image
      # -------------------------
      - name: Pull Docker image
        run: docker pull $IMAGE_TO_SCAN

      # ==========================
      # Install necessary build tools
      # ==========================
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip python3-dev build-essential cython3 git curl

      # ==========================
      # Install Docker Compose
      # ==========================
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify Docker Compose installation

      # ==========================
      # Set up Clair and PostgreSQL using Docker Compose
      # ==========================
      - name: Run Clair with PostgreSQL
        run: |
          # Clone Clair repository
          git clone https://github.com/quay/clair.git
          cd clair
          
          # Set up PostgreSQL and Clair using Docker Compose
          docker-compose up -d
          
          # Wait for Clair and PostgreSQL to initialize
          sleep 30  # Adjust the sleep time based on your needs
          until curl -s http://localhost:6060/v1/nodes; do echo "Waiting for Clair to be ready..."; sleep 5; done
          echo "Clair is ready!"

        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # ==========================
      # Push Image Layer to Clair (send POST request to Clair API)
      # ==========================
      - name: Push Image Layer to Clair
        run: |
          # Push image layer to Clair (send POST request)
          RESPONSE=$(curl -X POST http://localhost:6060/v1/layers \
            -H "Content-Type: application/json" \
            -d '{
                  "layer": {
                    "Name": "$IMAGE_TO_SCAN",
                    "Path": "docker://$IMAGE_TO_SCAN"
                  }
                }')
          
          # Extract layer ID from the response
          LAYER_ID=$(echo $RESPONSE | jq -r '.layer.id')
          
          if [ "$LAYER_ID" == "null" ]; then
            echo "Error: Layer ID is null, Clair API response is not as expected."
            exit 1
          fi

          echo "Layer ID: $LAYER_ID"
        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # -------------------------
      # Check Scan Status (Clair)
      # -------------------------
      - name: Check Scan Status
        run: |
          # Check scan status using Clair API GET request
          SCAN_STATUS=$(curl -X GET http://localhost:6060/v1/layers/$LAYER_ID)
          echo "Scan status: $SCAN_STATUS"
        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # -------------------------
      # Retrieve Vulnerabilities (Clair)
      # -------------------------
      - name: Retrieve Vulnerabilities
        run: |
          # Retrieve vulnerabilities from Clair API using layer ID
          VULNERABILITIES=$(curl -X GET http://localhost:6060/v1/vulnerabilities?layer=$LAYER_ID)
          echo "Vulnerabilities found: $VULNERABILITIES"
        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # ==========================
      # Trivy
      # ==========================
      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy
      - name: Scan with Trivy
        run: trivy image $IMAGE_TO_SCAN --severity HIGH,CRITICAL --format table > trivy-report.txt
        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # ==========================
      # Grype
      # ==========================
      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh
          sudo mv ./bin/grype /usr/local/bin/
          grype version
      - name: Scan with Grype
        run: grype $IMAGE_TO_SCAN --only-fixed --output table > grype-report.txt
        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # ==========================
      # Snyk
      # ==========================
#      - name: Set up Snyk
#        uses: snyk/actions/setup@master
#      - name: Scan with Snyk
#        run: snyk container test $IMAGE_TO_SCAN --severity-threshold=high --json --debug --no-proxy > snyk-report.json
#        env:
#          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
#        continue-on-error: true  # Allow the workflow to continue even if this step fails

      # ==========================
      # Upload reports
      # ==========================
      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            trivy-report.txt
            grype-report.txt
            clair-report.txt
            snyk-report.json
            sbom.json
